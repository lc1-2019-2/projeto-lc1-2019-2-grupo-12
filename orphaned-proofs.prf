("mergesort" mergesort append_occurrence 0 (append_occurrence-1 nil 3782319248 ("" (induct "l1") (("1" (skolem!) (("1" (expand "append") (("1" (expand "occurrences") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (skolem 1 ("h1" "t1")) (("2" (flatten) (("2" (induct "l2") (("1" (skolem 1 "x") (("1" (inst -1 "null" "x") (("1" (expand "append" 1) (("1" (expand "occurrences" 1 (1 2)) (("1" (lift-if) (("1" (prop) (("1" (replace -2) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 ("h2" "t2")) (("2" (flatten) (("2" (skolem 1 "x") (("2" (expand "append" 1) (("2" (hide -1) (("2" (expand "occurrences" 1 (1 2)) (("2" (lift-if) (("2" (prop) (("1" (inst? -2) (("1" (assert) nil nil)) nil) ("2" (inst? -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil mergesort nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (append def-decl "list[T]" list_props nil) (occurrences def-decl "nat" sorting_aux nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak))("mergesort" mergesort merge_sort_TCC3 0 (merge_sort_TCC3-1 nil 3589038563 ("" (skeep) (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil)) nil) ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (length_suffix formula-decl nil sorting_aux nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (length def-decl "nat" list_props nil) (below type-eq-decl nil nat_types nil) (integer nonempty-type-from-decl nil integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil) (/= const-decl "boolean" notequal nil) (nznum nonempty-type-eq-decl nil number_fields nil) (/ const-decl "[numfield, nznum -> numfield]" number_fields nil) (T formal-type-decl nil mergesort nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("radix_sort" radix_sort permutation_switch 0 (permutation_switch-1 nil 3782046665 ("" (skolem 1 ("l1" "l2" "l3")) (("" (flatten) (("" (expand "permutations") (("" (skolem 1 "x") (("" (inst? -1) (("" (inst? -2) (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((T formal-type-decl nil radix_sort nil) (permutations const-decl "bool" sorting_aux nil)) shostak))("radix_sort" radix_sort permutation_null_is_null 0 (permutation_null_is_null-1 nil 3782047379 ("" (skolem 1 "l") (("" (flatten) (("" (prop) (("1" (expand "permutations") (("1" (expand "occurrences") (("1" (inst?) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand "permutations") (("2" (expand "occurrences") (("2" (inst?) (("1" (lift-if) (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((permutations const-decl "bool" sorting_aux nil) (int_minus_int_is_int application-judgement "int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (l skolem-const-decl "list[T]" radix_sort nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (T formal-type-decl nil radix_sort nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (occurrences def-decl "nat" sorting_aux nil)) shostak))("radix_sort" radix_sort notcons_impliesnull 0 (notcons_impliesnull-1 nil 3781886850 ("" (induct "l") (("" (skolem 1 ("v" "t")) (("" (flatten) nil nil)) nil)) nil) ((list_induction formula-decl nil list_adt nil) (T formal-type-decl nil radix_sort nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak))("radix_sort" radix_sort length_ofcdr_is_smaller 0 (length_ofcdr_is_smaller-1 nil 3781885857 ("" (induct "l") (("1" (skolem 1 ("v" "t")) (("1" (flatten) (("1" (prop) (("1" (expand "length" 2 2) (("1" (assert) nil nil)) nil) ("2" (replace -1) (("2" (expand "length") (("2" (expand "length") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 "l") (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (list_induction formula-decl nil list_adt nil) (T formal-type-decl nil radix_sort nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) shostak))("radix_sort" radix_sort length_ofcdr_is_smaller_TCC1 0 (length_ofcdr_is_smaller_TCC1-1 nil 3781885855 ("" (subtype-tcc) nil nil) nil nil))("radix_sort" radix_sort length_1or0_is_simple 0 (length_1or0_is_simple-1 nil 3781884168 ("" (induct "l") (("" (skolem 1 ("v1" "tl1")) (("" (flatten) (("" (expand "length" -2) (("" (both-sides "-" "1" -2) (("" (assert) (("" (prop) (("1" (inst 2 "v1") (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil) ("2" (inst 2 "v1") (("2" (assert) (("2" (hide 1) (("2" (lemma "length_0_impliesnull") (("2" (inst -1 "tl1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (T formal-type-decl nil radix_sort nil) (list_induction formula-decl nil list_adt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (NOT const-decl "[bool -> bool]" booleans nil) (> const-decl "bool" reals nil) (odd? const-decl "bool" integers nil) (both_sides_minus_le1 formula-decl nil real_props nil) (both_sides_plus_le2 formula-decl nil real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length_0_impliesnull formula-decl nil radix_sort nil)) shostak))("radix_sort" radix_sort length_0_impliesnull 0 (length_0_impliesnull-1 nil 3781884526 ("" (skolem 1 "l") (("" (flatten) (("" (expand "length") (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) shostak))("radix_sort" radix_sort list_is_null_ornot_null 0 (list_is_null_ornot_null-1 nil 3781872541 ("" (induct "l") (("" (skolem 1 ("v1" "tl1")) (("" (flatten) (("" (prop) (("1" (skolem * ("v" "t")) (("1" (inst 1 "v1" "tl1") nil nil)) nil) ("2" (inst 1 "v1" "tl1") nil nil)) nil)) nil)) nil)) nil) ((list_induction formula-decl nil list_adt nil) (T formal-type-decl nil radix_sort nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak))